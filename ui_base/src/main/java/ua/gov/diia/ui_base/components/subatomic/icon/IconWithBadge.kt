package ua.gov.diia.ui_base.components.subatomic.icon

import android.graphics.BitmapFactory
import android.util.Base64
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.offset
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Badge
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ColorFilter
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import ua.gov.diia.ui_base.R
import ua.gov.diia.ui_base.components.infrastructure.utils.resource.UiText
import ua.gov.diia.ui_base.components.theme.Black
import ua.gov.diia.ui_base.components.theme.RedIndicator

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun IconWithBadge(
    modifier: Modifier,
    image: UiText,
    contentDescription: String? = "icon",
    showBadge: Boolean = false,
    imageColor: Color? = Black,
    alpha: Float = 1.0f,
) {
    Box(
        contentAlignment = Alignment.Center
    ) {
        val imageValue = when (image) {
            is UiText.DynamicString -> image.value
            is UiText.StringResource -> image.resId.let { LocalContext.current.getString(it) }
        }
        if (image is UiText.DynamicString) {
            val bitmap = remember(imageValue) {
                val byteArray = Base64.decode(imageValue, Base64.DEFAULT)
                BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)?.asImageBitmap()
            }
            if (bitmap != null) {
                Image(
                    modifier = modifier,
                    bitmap = bitmap,
                    contentScale = ContentScale.Fit,
                    colorFilter = ColorFilter.tint(Black),
                    alpha = alpha,
                    contentDescription = contentDescription
                )
            }
        } else if (image is UiText.StringResource) {
            image.resId?.let { resId ->
                Image(
                    modifier = modifier,
                    painter = painterResource(resId),
                    contentDescription = contentDescription,
                    alpha = alpha,
                )
            }
        } else {
            Image(
                modifier = modifier,
                painter = painterResource(id = R.drawable.diia_check),
                contentDescription = contentDescription,
                colorFilter = imageColor?.let { ColorFilter.tint(it) },
            )
        }

        if (showBadge) {
            Badge(
                modifier = Modifier
                    .size(8.dp)
                    .offset(1.dp, (-8).dp), // Adjust the positioning as needed
                containerColor = RedIndicator
            )
        }
    }
}


@Composable
@Preview
fun IconBase64WithBadgePreview() {
    val base64String =
        ""

    Column(
        modifier = Modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        IconWithBadge(
            modifier = Modifier.size(24.dp),
            image = UiText.DynamicString(base64String),
            contentDescription = "User Icon",
            showBadge = true
        )
    }
}

@Composable
@Preview
fun IconBase64WithDisabledPreview() {
    val base64String =
        ""

    Column(
        modifier = Modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        IconWithBadge(
            modifier = Modifier.size(24.dp),
            image = UiText.DynamicString(base64String),
            contentDescription = "User Icon",
            showBadge = false,
            alpha = 0.3f
        )
    }
}